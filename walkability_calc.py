# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WalkabilityCalc
                                 A QGIS plugin
 This plugin caculate the a score of walkabilty in a points
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-08
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Guy Moria
        email                : guymoria2@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsMapLayerProxyModel, Qgis, QgsProject

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .walkability_calc_dialog import WalkabilityCalcDialog
import os.path
import processing
from .config import *
from . import helpers

class WalkabilityCalc:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'WalkabilityCalc_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Walkability calculator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('WalkabilityCalc', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/walkability_calc/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Calc walkability'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Walkability calculator'),
                action)
            self.iface.removeToolBarIcon(action)

    def _find_layer_by_name(self, layer_name):
        layers = QgsProject.instance().mapLayersByName(layer_name)
        if not layers:
            return None
        elif len(layers) > 1:
            raise Exception("found more than 1 layer with name: " + layer_name + ". layers found: " + ", ".join(layers))
        else:
            return layers[0]

    # TODO create sidewalks from roads type of paths and footway and combine all together
    def create_sidewalks_layer(self):
        # Intersenct beetwen the layers
        roads_hulon = None
        if DEBUG:
            roads_hulon = self._find_layer_by_name("DEBUG_hulon_roads")
        if not roads_hulon:
            roads_hulon = helpers._intersenct(self.roads_layer, self.border_layer, "hulon_roads")

        buffer_1 = None
        if DEBUG:
            buffer_1 = self._find_layer_by_name("DEBUG_buffer_1")
        if not buffer_1:
            buffer_1 = helpers._buffer(roads_hulon, ROADS_BUFFER_DISTANCE, "buffer_1")

        # create the second buffer from street layers
        buffer_2 = None
        if DEBUG:
            buffer_2 = self._find_layer_by_name("DEBUG_buffer_2")
        if not buffer_2:
            buffer_2 = helpers._buffer(roads_hulon, ROADS_BUFFER_DIFFRENCE, "buffer_2")

        # calc the diffrence between the layers
        diffrence_layer = None
        if DEBUG:
            diffrence_layer = self._find_layer_by_name("DEBUG_diffrence")
        if not diffrence_layer:
            diffrence_layer = helpers._diffence(buffer_1, buffer_2, "diffrence")

        # saperate the sidewalks
        sidewalks_vector = None
        if DEBUG:
            sidewalks_vector = self._find_layer_by_name("DEBUG_sidewalks_vector")
        if not sidewalks_vector:
            sidewalks_vector = helpers._saperate(diffrence_layer, "sidewalks_vector")

        sidewalks_raster = None
        if DEBUG:
            sidewalks_raster = self._find_layer_by_name("DEBUG_sidewalks_raster")
        if not sidewalks_raster:
            sidewalks_raster = helpers._vector_to_raster(sidewalks_vector, SIDEWALK_RASTERIZE_BURN, self.border_layer, "sidewalks_raster")

        return sidewalks_vector, sidewalks_raster

    def create_demand_layer(self):
        demand_1 = None
        if DEBUG:
            demand_1 = self._find_layer_by_name("DEBUG_demand_1")
        if not demand_1:
            demand_1 = helpers._create_heatmap(self.public_inst_layer, HEATMAP_RADIUS_SIZE, "demand_1")

        return demand_1

    def create_shaded_area(self):
        buffered_shaded_layer = None
        if DEBUG:
            buffered_shaded_layer = self._find_layer_by_name("DEBUG_buffer_shades")
        if not buffered_shaded_layer:
            buffered_shaded_layer = helpers._buffer(self.shaded_layer, TREE_BUFFER, "buffer_shades")

        buffered_shaded_raster_layer = None
        if DEBUG:
            buffered_shaded_raster_layer = self._find_layer_by_name("DEBUG_raster_shaded")
        if not buffered_shaded_raster_layer:
            buffered_shaded_raster_layer = helpers._vector_to_raster(buffered_shaded_layer, SHADES_RASTERIZE_BURN, self.border_layer, "raster_shaded")

        return buffered_shaded_layer, buffered_shaded_raster_layer

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = WalkabilityCalcDialog()

            self.dlg.comboBoxRoadsLayer.setFilters(QgsMapLayerProxyModel.LineLayer)
            self.dlg.comboBoxBorderLayer.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.dlg.comboBoxShadedLayer.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.dlg.comboBoxInstituteLayer.setFilters(QgsMapLayerProxyModel.PointLayer)
            # TODO!!! use CRS from user input

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            self.roads_layer = self.dlg.comboBoxRoadsLayer.currentLayer()
            self.border_layer = self.dlg.comboBoxBorderLayer.currentLayer()
            self.shaded_layer = self.dlg.comboBoxShadedLayer.currentLayer()
            self.public_inst_layer = self.dlg.comboBoxInstituteLayer.currentLayer()


            sidewalks_vector_layer, sidewalks_raster_layer = self.create_sidewalks_layer()

            #demand_layer = self.create_demand_layer()
            
            buffered_shaded_vector_layer, buffered_shaded_raster_layer = self.create_shaded_area()

            print("finish plugin run")
            

            # # TODO "Create Spatial Index" of the Grid layer!!!

            # # 3. Intersect grid with total sidewalks
            # processing.run("native:selectbylocation", {'INPUT':'Polygon?crs=EPSG:2039&field=id:long(0,0)&field=left:double(0,0)&field=top:double(0,0)&field=right:double(0,0)&field=bottom:double(0,0)&uid={26b601be-5f90-4d39-ad07-a20fe696872c}','PREDICATE':[0],'INTERSECT':'C:\\Users\\guymo\\Desktop\\union.shp|layername=union','METHOD':0})